import { app, BrowserWindow, desktopCapturer, dialog, ipcMain, systemPreferences } from 'electron'
import { openSystemPreferences } from 'electron-util'
import fs from 'fs/promises'
import { UserSettings } from './types'
import iohook from '@mechakeys/iohook'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit()
}

let mainWindow: BrowserWindow
const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  if (!app.isPackaged) {
    mainWindow.webContents.openDevTools({ mode: 'detach', activate: false })
  }

  if (app.isPackaged && !isOSX()) {
    mainWindow.removeMenu()
  }
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

const settingsFolder = app.getPath('userData')
const settingsFile = `${settingsFolder}\\settings.json`
async function appStart() {
  try {
    await fs.access(settingsFile)
  } catch (error) {
    const emptySettings = {}
    await fs.writeFile(settingsFile, JSON.stringify(emptySettings))
  }
}
appStart()

const isOSX = () => process.platform === 'darwin'

ipcMain.handle('openScreenSecurity', () => openSystemPreferences('security', 'Privacy_ScreenCapture'))
ipcMain.handle('getScreenAccess', () => !isOSX || systemPreferences.getMediaAccessStatus('screen') === 'granted')
ipcMain.handle('getScreenSources', async () => {
  const sources = await desktopCapturer.getSources({ types: ['window', 'screen'] })
  const newSources = sources
    .filter(source => !/^[A-Za-z]:\\(?:[^\\]+\\)*[^\\]+$/.test(source.name))
    .map(source => {
      const newSource = {
        ...source,
        thumbnailURL: source.thumbnail.toDataURL()
      }
      return newSource
    })
  return newSources
})
ipcMain.handle('getUserSettings', async () => {
  try {
    const userSettings = await fs.readFile(settingsFile)
    const userSettingsJson = JSON.parse(userSettings.toString())
    return userSettingsJson
  } catch (error) {
    return {}
  }
})
ipcMain.handle('saveUserSettings', async (_, userSettings: UserSettings) => {
  const userSettingsJson = JSON.stringify(userSettings)
  await fs.writeFile(settingsFile, userSettingsJson)
})
ipcMain.handle('getVideoPath', async () => {
  const { filePath } = await dialog.showSaveDialog({
    buttonLabel: 'Save video',
    defaultPath: `draw-recorder-${Date.now()}.mp4`
  })
  return filePath
})
ipcMain.handle('saveVideo', async (_, path: string, content: Buffer) => {
  await fs.writeFile(path, content)
})

function resumeRecording() {
  mainWindow.webContents.send('resumeRecording')
}
function pauseRecording() {
  mainWindow.webContents.send('pauseRecording')
}

ipcMain.handle('startIohook', () => {
  iohook.on('mousedown', resumeRecording)
  iohook.on('mouseup', pauseRecording)
  iohook.start()
})
ipcMain.handle('stopIohook', () => {
  iohook.off('mousedown', resumeRecording)
  iohook.off('mouseup', pauseRecording)
  iohook.stop()
})